
# return if we are not in a tty
[ -z "$PS1" ] && return

export EDITOR=vim

alias rm='rm -I'
alias cd..='cd ..'
alias ll='ls -al --color=auto'

# To add git infos in the PS1
function parse_git_dirty {
  git diff --no-ext-diff --quiet --exit-code &> /dev/null || echo "*"
}

function parse_git_branch {
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/(\1$(parse_git_dirty))/"
}

# a cool PS1 with git infos
# Includes history -a to ensure it's preserved on every command, not on shell exit
PS1="\$(history -a)\u\[$(tput bold)\]\[$(tput sgr0)\]\[\033[38;5;196m\]@\H\[$(tput sgr0)\]\[$(tput sgr0)\]\[\033[38;5;15m\] [\w] {\[$(tput sgr0)\]\[\033[38;5;4m\]\$?\[$(tput sgr0)\]\[\033[38;5;15m\]} \$(parse_git_branch) \n\[$(tput bold)\]\\$\[$(tput sgr0)\] \[$(tput sgr0)\]"
shopt -s histappend

## will set the terminal title to the current command
trap 'printf "\033]0;%s\007" "${BASH_COMMAND//[^[:print:]]/}"' DEBUG

joined-tmux() {
  tmux attach -d -t $1 || tmux -u new -s $1 
}

alias jointmux=joined-tmux

command="jointmux `basename $PWD`"
alias pwdtmux="$command"

CLEAN_HOSTNAME="${HOSTNAME//\./-}"
# This creates an alias to quick join or create a session that has the hostname as a session name
command="jointmux $CLEAN_HOSTNAME"
alias htmux="$command"

alias kpptmux="tmux attach -d -t kpptmux || tmux new-session -s kpptmux -c ~/src/app-platform \; split-window -v -c ~/src/app-platform \; rename-window kpp"

git config --global credential.helper cache

alias k="kubectl"
if which kubectl >/dev/null 2>&1; then
  source <(kubectl completion bash)
  complete -o default -F __start_kubectl k
fi

if `which fortune > /dev/null 2>&1`; then
  alias qco='git commit -a -m"$(fortune -n 50 -s)"'
else
  alias qco='git commit -a'
fi
alias qpush='git push origin HEAD'

fix-tmux-ssh() {
  eval $(tmux show-env -s |grep '^SSH_')
}

# Lines below are an ugly hack to set the title to 'new-session' via a dummy command
new-session () {
  nothing > /dev/null 2>&1
}
new-session
